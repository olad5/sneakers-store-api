openapi: 3.0.0
info:
  title: Sneaker Store API
  description: E commerce API built with node, express and mongodb.
  version: 1.0.0
servers:
  - url: https://sneaker-store-api.herokuapp.com/api/v1
    description: Production server (uses live data)
  - url: http://localhost:5000/api/v1
    description: Sandbox server (uses test data)
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new  User.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
            example:
              email: susan@gmail.com
              password: secret
              name: susan
        required: true
      responses:
        "201":
          description:
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login User In.
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"
            example:
              email: susan@gmail.com
              password: secret
        required: true
      responses:
        "200":
          description: ""
          headers: {}
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
  /auth/logout:
    get:
      tags:
        - Auth
      summary: Log User Out.
      responses:
        "200":
          description: ""
          headers: {}
  /users:
    get:
      tags:
        - Users
      summary: Get All Users
      responses:
        "200":
          description: ""
          headers: {}

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get a Single  User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        "200":
          description: ""
          headers: {}
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/showMe:
    get:
      tags:
        - Users
      summary: Show Current User
      responses:
        "200":
          description: ""
          headers: {}
  /users/updateUser:
    patch:
      tags:
        - Users
      summary: Update Current User details.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddItemToCartRequest"
            example:
              email: susan@gmail.com
              name: susan
        required: true
      responses:
        "200":
          description: ""
          headers: {}
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
  /users/updateUserPassword:
    patch:
      tags:
        - Users
      summary: Update Current User's Password.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPasswordRequest"
            example:
              oldPassword: secret
              newPassword: secret
        required: true
      responses:
        "200":
          description: ""
          headers: {}
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
  /items:
    get:
      tags:
        - Items
      summary: Returns a list of all items.
      responses:
        "200":
          description: A JSON array of item names
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Items
      summary: Creates a new item.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNewItemRequest"
            example:
              name: Nike Menâ€™s Air Force 1 Low
              price: 1200
              company: nike
              description: This legendary shoe was originally designed for basketball players. Its non-marking rubber sole gives it a good traction. It has two pivot points in the forefoot and heel for multidirectional transitions. Named after the us president's aircraft it is a legendary icon.
              category: men
        required: true
      responses:
        "201":
          description:
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /items/{itemId}:
    get:
      tags:
        - Items
      summary: Returns an item by ID.
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        "200":
          description: Returns a single item.
          content:
            application/json:
              schema:
                type: object
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - Items
      summary: Updates a single Item(Also use this to upload product images).
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      requestBody:
        description: ""
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdateItemRequest"
            example:
              price: 1200
              images: Upload 4 images
      responses:
        "200":
          description: Updates and Returns a Order item.
          content:
            application/json:
              schema:
                type: object
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Items
      summary: Deletes an Item.
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "404":
          $ref: "#/components/responses/NotFound"

  /cart:
    get:
      tags:
        - Cart
      summary: Gets User's Cart.
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Cart
      summary: Add item to Cart.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddItemToCartRequest"
            example:
              itemId: 61e67be5683b17775b9485f3
              quantity: 2
        required: true
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "201":
          description:
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - Cart
      summary: Updates a User's Cart.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddItemToCartRequest"
            example:
              itemId: 61e67be5683b17775b9485f3
              quantity: 2
        required: true
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Cart
      summary: Removes an Item from a User's Cart.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveItemToCartRequest"
            example:
              itemId: 61e67be5683b17775b9485f3
        required: true
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /cart/empty-cart:
    delete:
      tags:
        - Cart
      summary: Empties a User's Cart.
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /orders:
    get:
      tags:
        - Orders
      summary: Get all Orders.
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Orders
      summary: Creates a new Order.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNewOrderRequest"
            example:
              tax: 14
              shippingFee: 67
        required: true
      responses:
        "201":
          description:
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /orders/showAllMyOrders:
    get:
      tags:
        - Orders
      summary: Get Current User's Orders.
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Returns an Order by ID.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        "200":
          description: Returns a Order item.
          content:
            application/json:
              schema:
                type: object
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - Orders
      summary: Updates an Order.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderRequest"
            example:
              paystackRef: voek1nolps
      responses:
        "200":
          description: Updates and Returns a Order item.
          content:
            application/json:
              schema:
                type: object
        "404":
          $ref: "#/components/responses/NotFound"

  /checkout:
    get:
      tags:
        - User Settings
      summary: Gets User's Settings.
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - User Settings
      summary: Updates User's Settings.
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserSettingsRequest"
            example:
              firstName: susan
              lastName: baker
              email: susan@gmail.com
              phone: 08012251493
              address: No 10 Johnson St, Ikeja
              city: Lagos
              state: Lagos
              zipCode: 100282
      responses:
        "200":
          description:
          content:
            application/json:
              schema:
                type: object
        "201":
          description:
          content:
            application/json:
              schema:
                type: object
        "404":
          $ref: "#/components/responses/NotFound"

components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: User gave a bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    RegisterUserRequest:
      title: LoginUserRequest
      required:
        - email
        - password
        - name
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
      example:
        email: susan@gmail.com
        password: secret
        name: susan
    LoginUserRequest:
      title: LoginUserRequest
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: susan@gmail.com
        password: secret
    CreateNewItemRequest:
      title: CreateNewItemRequest
      type: object
      required:
        - name
        - price
        - company
        - description
        - category
      properties:
        name:
          type: string
        price:
          type: integer
        company:
          type: string
        description:
          type: string
        category:
          type: string
      example:
        name: Nike Menâ€™s Air Force 1 Low
        price: 1200
        company: nike
        description: This legendary shoe was originally designed for basketball players. Its non-marking rubber sole gives it a good traction. It has two pivot points in the forefoot and heel for multidirectional transitions. Named after the us president's aircraft it is a legendary icon.
        category: men
    CreateNewOrderRequest:
      title: CreateNewOrderRequest
      type: object
      required:
        - tax
        - shippingFee
      properties:
        tax:
          type: integer
        shippingFee:
          type: integer
      example:
        tax: 14
        shippingFee: 67
    AddItemToCartRequest:
      title: AddItemToCartRequest
      required:
        - itemId
        - quantity
      type: object
      properties:
        itemId:
          type: string
        quantity:
          type: integer
      example:
        itemId: 61e67ae5683b17775b9485f3
        quantity: 2
    RemoveItemToCartRequest:
      title: RemoveItemToCartRequest
      required:
        - itemId
      type: object
      properties:
        itemId:
          type: string
      example:
        itemId: 61e67ae5683b17775b9485f3
    UpdateOrderRequest:
      title: UpdateOrderRequest
      required:
        - paystackRef
      type: object
      properties:
        paystackRef:
          type: string
      example:
        paystackRef: voek1nolps
    UpdateUserSettingsRequest:
      title: UpdateUserSettingsRequest
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
      example:
        firstName: susan
        lastName: baker
        email: susan@gmail.com
        phone: 08012251493
        address: No 10 Johnson St, Ikeja
        city: Lagos
        state: Lagos
        zipCode: 100282
    UpdateUserRequest:
      title: UpdateUserRequest
      type: object
      properties:
        email:
          type: string
        name:
          type: string
      example:
        email: susan@gmail.com
        name: susan
    UpdateUserPasswordRequest:
      title: UpdateUserPasswordRequest
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      example:
        oldPassword: secret
        newPassword: secret
    UpdateItemRequest:
      title: UpdateItemRequest
      type: object
      properties:
        price:
          type: string
        # freeShipping:
        #   type: string
        images:
          type: array
          items:
            type: string
            format: binary
      example:
        price: 1200
        images: Upload 4 images
